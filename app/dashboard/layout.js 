"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  Menu, X, ChevronLeft, ChevronRight,
  ChartLine, Wallet, WalletCards, HandCoins,
  Building2, FolderKanban, Users2, FileBarChart, Settings,
} from "lucide-react";

export default function DashboardLayout({ children }) {
  const pathname = usePathname();
  const [sidebarOpen, setSidebarOpen] = useState(false);   // mobile drawer
  const [collapsed, setCollapsed] = useState(false);       // desktop collapse

  // collapse durumunu hatırla
  useEffect(() => {
    if (typeof window === "undefined") return;
    const saved = localStorage.getItem("dash_sidebar_collapsed");
    if (saved === "1") setCollapsed(true);
  }, []);
  useEffect(() => {
    if (typeof window === "undefined") return;
    localStorage.setItem("dash_sidebar_collapsed", collapsed ? "1" : "0");
  }, [collapsed]);

  const items = [
    { label: "Özet", href: "/dashboard", icon: <ChartLine className="h-4 w-4" /> },
    { label: "Hazine", href: "/dashboard/treasury", icon: <Wallet className="h-4 w-4" /> },
    { label: "İşlemler", href: "/dashboard/transactions", icon: <WalletCards className="h-4 w-4" /> },
    { label: "Borçlar", href: "/dashboard/debts", icon: <HandCoins className="h-4 w-4" /> },
    { label: "Firmalar", href: "/dashboard/companies", icon: <Building2 className="h-4 w-4" /> },
    { label: "Projeler", href: "/dashboard/projects", icon: <FolderKanban className="h-4 w-4" /> },
    { label: "Ekip", href: "/dashboard/team", icon: <Users2 className="h-4 w-4" /> },
    { label: "Raporlar & AI", href: "/dashboard/ai-reports", icon: <FileBarChart className="h-4 w-4" /> },
    { label: "Ayarlar", href: "/dashboard/settings", icon: <Settings className="h-4 w-4" /> },
  ];

  const mainCol = collapsed ? "lg:col-span-11" : "lg:col-span-10";

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Topbar */}
      <header className="sticky top-0 z-40 bg-white/80 backdrop-blur border-b border-slate-200">
        <div className="mx-auto max-w-7xl px-3 sm:px-4 py-3 flex items-center gap-3">
          <button
            className="lg:hidden p-2 rounded-xl hover:bg-slate-100 text-slate-700"
            aria-label="Menüyü aç"
            onClick={() => setSidebarOpen(true)}
          >
            <Menu className="h-5 w-5" />
          </button>

          <div className="flex items-center gap-2 text-slate-800 font-semibold">
            <div className="h-9 w-9 rounded-2xl bg-slate-900 text-white grid place-items-center">IA</div>
            <span>İnşaat AI</span>
            <span className="hidden sm:inline mx-3 text-slate-300">|</span>
            <span className="hidden sm:inline text-slate-500">Dashboard</span>
          </div>
        </div>
      </header>

      {/* Mobile Drawer */}
      <MobileSidebar
        open={sidebarOpen}
        onClose={() => setSidebarOpen(false)}
        items={items}
        pathname={pathname}
      />

      {/* Grid */}
      <div className="mx-auto max-w-7xl px-3 sm:px-4 py-4 grid grid-cols-12 gap-4">
        {/* Desktop Sidebar */}
        <aside className={`hidden lg:block ${collapsed ? "lg:col-span-1" : "lg:col-span-2"}`}>
          <div className="sticky top-20">
            <button
              onClick={() => setCollapsed(!collapsed)}
              aria-expanded={!collapsed}
              className="mb-2 w-full flex items-center justify-between rounded-xl border border-slate-200 bg-white px-3 py-2 text-xs text-slate-600 hover:bg-slate-50"
              aria-label="Yan menüyü daralt/gelişlet"
            >
              <span className={`${collapsed ? "hidden" : ""}`}>Menü</span>
              {collapsed ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
            </button>

            <nav className="space-y-1">
              {items.map((it) => (
                <SidebarLink
                  key={it.href}
                  href={it.href}
                  icon={it.icon}
                  label={it.label}
                  collapsed={collapsed}
                  active={pathname === it.href || pathname?.startsWith(it.href + "/")}
                />
              ))}
            </nav>
          </div>
        </aside>

        {/* Main content area */}
        <main className={`col-span-12 ${mainCol}`}>
          {children}
        </main>
      </div>

      {/* Mobile Bottom Tabbar */}
      <MobileTabbar items={items} />
    </div>
  );
}

/* ---------- Components ---------- */

function SidebarLink({ href, icon, label, active = false, collapsed = false }) {
  return (
    <Link
      href={href}
      title={label}
      className={`w-full flex items-center ${collapsed ? "justify-center" : ""} gap-2 rounded-xl px-3 py-2 text-sm transition-colors ${
        active ? "bg-slate-900 text-white" : "text-slate-700 hover:bg-slate-100"
      }`}
    >
      <span>{icon}</span>
      {!collapsed && <span>{label}</span>}
    </Link>
  );
}

function MobileSidebar({ open, onClose, items, pathname }) {
  return (
    <>
      {/* overlay */}
      <div
        className={`fixed inset-0 z-50 bg-black/40 lg:hidden transition-opacity ${open ? "opacity-100" : "pointer-events-none opacity-0"}`}
        onClick={onClose}
      />
      {/* drawer */}
      <aside
        className={`fixed inset-y-0 left-0 z-50 w-72 bg-white shadow-xl p-4 lg:hidden transform transition-transform ${
          open ? "translate-x-0" : "-translate-x-full"
        }`}
        aria-hidden={!open}
      >
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2 text-slate-800 font-semibold">
            <div className="h-9 w-9 rounded-2xl bg-slate-900 text-white grid place-items-center">IA</div>
            <span>İnşaat AI</span>
          </div>
          <button className="p-2 rounded-xl hover:bg-slate-100" aria-label="Menüyü kapat" onClick={onClose}>
            <X className="h-5 w-5" />
          </button>
        </div>
        <nav className="space-y-1">
          {items.map((it) => (
            <SidebarLink
              key={it.href}
              href={it.href}
              icon={it.icon}
              label={it.label}
              active={pathname === it.href || pathname?.startsWith(it.href + "/")}
            />
          ))}
        </nav>
      </aside>
    </>
  );
}

function MobileTabbar({ items }) {
  return (
    <nav
      className="lg:hidden fixed bottom-0 inset-x-0 z-40 bg-white border-t border-slate-200 grid grid-cols-5"
      style={{ paddingBottom: "env(safe-area-inset-bottom)" }}
    >
      {items
        .filter((_, i) => i < 5) /* 5 ikon sığıyor; istersen düzenleyebilirsin */
        .map((it) => (
          <Link key={it.href} href={it.href} className="flex flex-col items-center py-2 text-xs text-slate-600">
            {it.icon}
            <span className="mt-1">{it.label}</span>
          </Link>
        ))}
    </nav>
  );
}
